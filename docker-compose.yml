version: '3'
networks:
  pulsar:
    driver: bridge
  sidecar:
    driver: bridge
  database:
    driver: bridge
services:
# Start zookeeper
  zookeeper:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar", "resource", "all"]
    container_name: zookeeper
    restart: on-failure
    networks:
      - pulsar
    volumes:
      - ./data/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && bin/generate-zookeeper-config.sh conf/zookeeper.conf && exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

# Init cluster metadata
  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar", "resource", "all"]
    networks:
      - pulsar
    command: bin/pulsar initialize-cluster-metadata --cluster cluster-a --zookeeper zookeeper:2181 --configuration-store zookeeper:2181 --web-service-url http://broker:8080 --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy

# Start bookie
  bookie:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar", "resource", "all"]
    container_name: bookie
    restart: on-failure
    networks:
      - pulsar
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
  # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ./data/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf
      && exec bin/pulsar bookie"

# Start broker
  broker:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar", "resource", "all"]
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - pulsar
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      - advertisedListeners=external:pulsar://127.0.0.1:6650
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf
      &&  exec bin/pulsar broker"

  # MySQL8
  db:
    image: mysql:8
    hostname: mysqldb
    container_name: mysqldb
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      - MYSQL_DATABASE=ingestas
      - MYSQL_ROOT_PASSWORD=adminadmin
    profiles: ["resource"]
    networks:
      - pulsar
    ports:
      - '3306:3306'
    volumes:
      - ./data/mysql:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  
  # Database
  postgres:
    image: postgres:14-alpine
    profiles: ["sta", "all"]
    restart: always
    hostname: postgres
    environment:
      - POSTGRES_DB=sta_db
      - POSTGRES_USER=sta_user
      - POSTGRES_PASSWORD=sta_password
    networks:
      - database
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres-data14:/var/lib/postgresql/data
      - ./data/scripts/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sta_user -d sta_db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  # Servicios de SaludTech de los alpes
  sta:
    container_name: sta
    hostname: sta
    image: sta/flask
    profiles: ["sta", "all"]
    networks:
      - sidecar
      - pulsar
      - database
    labels:
      SidecarDiscover: "false"
    depends_on:
      - broker
      - postgres
    environment:
      - STA_ADDRESS=sta
      - PULSAR_ADDRESS=broker
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=sta_user
      - DB_PASS=sta_password
      - DB_NAME=sta_db
    ports:
      - "5000:5000"